<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ru.glaizier</groupId>
    <artifactId>todo</artifactId>
    <version>0.1</version>
    <description>Todo list application</description>
    <packaging>war</packaging>

    <properties>
        <jdk.version>1.8</jdk.version>
    </properties>
    <profiles>
        <!--Todo move location to properties file-->
        <profile>
            <id>local</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <profile.name>local</profile.name>
                <glaizier.server>127.0.0.1</glaizier.server>

                <glaizier.tomcat.path>${project.name}</glaizier.tomcat.path>
                <glaizier.tomcat.port>8080</glaizier.tomcat.port>
            </properties>
        </profile>
        <profile>
            <id>docker</id>
            <properties>
                <profile.name>docker</profile.name>
                <glaizier.server>127.0.0.1</glaizier.server>
                <glaizier.tomcat.path>${project.name}</glaizier.tomcat.path>
                <glaizier.tomcat.port>8888</glaizier.tomcat.port>
            </properties>
        </profile>
    </profiles>

    <build>
        <!-- Enable placeholders for maven and property file-->
        <filters>
            <filter>${project.basedir}/src/main/resources/profiles/${profile.name}.properties</filter>
        </filters>
        <finalName>${project.name}</finalName>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>${jdk.version}</source>
                    <target>${jdk.version}</target>
                    <!--Controls whether annotation processing and/or compilation is done. -proc:none means that
                    compilation takes place without annotation processing. -proc:only means that only annotation
                    processing is done, without any subsequent compilation.-->
                    <!--Can't use -proc:none because we use lombok that generate code using annotations-->
                    <!--<compilerArgument>-proc:none</compilerArgument>-->
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <goal>war:war</goal>
                    <!-- Don't need it because of the java config usage instead -->
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>

            <!--TODO upgrade to Tomcat8?-->
            <!--Tomcat deploy and run plugin-->
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <!--http config-->
                    <server>${glaizier.server}</server>
                    <url>http://${glaizier.server}:${glaizier.tomcat.port}/manager/text</url>
                    <path>/${glaizier.tomcat.path}</path>
                    <!--https config-->
                    <httpsPort>8443</httpsPort>
                    <!--Store in target-->
                    <keystoreFile>${project.build.directory}/tomcat7.keystore</keystoreFile>
                    <keystorePass>password</keystorePass>
                </configuration>
            </plugin>

            <!--Create keys for tomcat plugin needed for https-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>keytool-maven-plugin</artifactId>
                <version>1.5</version>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <id>clean</id>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                    <execution>
                        <phase>generate-resources</phase>
                        <id>genkey</id>
                        <goals>
                            <goal>generateKeyPair</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <keystore>${project.build.directory}/tomcat7.keystore</keystore>
                    <dname>cn=localhost</dname>
                    <keypass>password</keypass>
                    <storepass>password</storepass>
                    <alias>tomcat7</alias>
                    <keyalg>RSA</keyalg>
                    <keysize>2048</keysize>
                </configuration>
            </plugin>

            <!-- We have different profiles (properties files or environments). In RootConfig we ask to use
            environment.properties file in classpath to inject values from there into classes. So using this plugin
            we copy and rename current enabled maven profile (-P <name-of-profile> key in mvn command) to
            environment.properties for Spring-->
            <plugin>
                <groupId>com.coderplus.maven.plugins</groupId>
                <artifactId>copy-rename-maven-plugin</artifactId>
                <version>1.0.1</version>
                <executions>
                    <execution>
                        <id>copy-file</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <sourceFile>
                                ${project.build.outputDirectory}/profiles/${profile.name}.properties
                            </sourceFile>
                            <destinationFile>
                                ${project.build.outputDirectory}/profiles/environment.properties
                            </destinationFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>4.3.6.RELEASE</version>
        </dependency>

        <!-- compile only, when deployed container provide this -->
        <!-- MvcWebAppInitializer depends on servlet api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf</artifactId>
            <version>3.0.3.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf-spring4</artifactId>
            <version>3.0.3.RELEASE</version>
        </dependency>
        <!--Need this in order to use conditional /logout link when user has been authenticated-->
        <dependency>
            <groupId>org.thymeleaf.extras</groupId>
            <artifactId>thymeleaf-extras-springsecurity4</artifactId>
            <version>3.0.1.RELEASE</version>
        </dependency>


        <!--All security configs-->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>4.2.1.RELEASE</version>
        </dependency>
        <!-- Need for AbstractSecurityWebApplicationInitializer-->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>4.2.1.RELEASE</version>
        </dependency>

        <!-- Rest controller -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.8.7</version>
        </dependency>

        <!-- Jwt token Java implementation for api security -->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>3.1.0</version>
        </dependency>

        <!-- Getter, setter, builder... generation. We don't need this dependency in result jar so provided-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.16</version>
            <scope>provided</scope>
        </dependency>

        <!-- Loggers -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.25</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
        </dependency>
        <!-- Enable spring logs because spring uses apache commons logging-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.25</version>
        </dependency>


        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        <!-- Need to test spring app itself and security particularly -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <version>4.0.4.RELEASE</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>